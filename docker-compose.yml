services:
  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test:
        [
          "CMD",
          "/opt/bitnami/zookeeper/bin/zkServer.sh",
          "status"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '2181:2181'
    networks:
      - internal

  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      # Kraft mode roles & IDs
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      # Listen on all interfaces; controller on 9093
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093'
      # Advertise back to clients as "kafka:9092"
      KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      # Protocol map (must match listener names)
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT'
      # Which listener the controller uses
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      # allow plaintext in dev
      ALLOW_PLAINTEXT_LISTENER: "yes"
    healthcheck:
      test:
        [
          "CMD",
          "/opt/bitnami/kafka/bin/kafka-broker-api-versions.sh",
          "--bootstrap-server",
          "kafka:9092"
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    ports:
      - '9092:9092'
    networks:
      - internal

  redis:
    container_name: redis
    hostname: redis
    image: redis:7.4.2
    command:
      - redis-server
    ports:
      - '16379:6379'
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  mysql-user:
    container_name: mysql-user
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: banksphere_user
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - '33061:3306'
    healthcheck:
      test: [ "CMD","mysqladmin","ping","-h","localhost" ]
      interval: 5s
      retries: 5
    networks:
      - internal

  mysql-account:
    container_name: mysql-account
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: banksphere_account
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - '33062:3306'
    healthcheck:
      test: [ "CMD","mysqladmin","ping","-h","localhost" ]
      interval: 5s
      retries: 5
    networks:
      - internal

  mysql-transaction:
    container_name: mysql-transaction
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: banksphere_transaction
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - '33063:3306'
    healthcheck:
      test: [ "CMD","mysqladmin","ping","-h","localhost" ]
      interval: 5s
      retries: 5
    networks:
      - internal

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    #    image: api-gateway:latest
    ports:
      - '8080:8080'
    volumes:
      - ./api-gateway/src/main/resources/application.yml:/config/application.yml:ro
      - ./logs/api-gateway:/logs/api-gateway
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
    networks:
      - internal

  user-service:
    container_name: user-service
    build:
      context: ./user
      dockerfile: Dockerfile
    #    image: user-service:latest
    expose:
      - '8081'
    volumes:
      - ./logs/user:/logs/user
    depends_on:
      mysql-user:
        condition: service_healthy
      redis:
        condition: service_healthy
    #    healthcheck:
    #      #      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
    #      interval: 10s
    #      timeout: 5s
    #      retries: 5
    #      test:
    #        [
    #          "CMD",
    #          "/bin/sh",
    #          "-c",
    #          "curl -f http://localhost:8081/actuator/health || exit 1"
    #        ]
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-user:3306/banksphere_user
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - SERVER_ADDRESS=0.0.0.0
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
    networks:
      - internal

  account-service:
    container_name: account-service
    build:
      context: ./account
      dockerfile: Dockerfile
    #    image: account-service:latest
    expose:
      - '8082'
    volumes:
      - ./logs/account:/logs/account
    depends_on:
      mysql-account:
        condition: service_healthy
      kafka:
        condition: service_healthy
    #    healthcheck:
    #      #      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
    #      interval: 10s
    #      timeout: 5s
    #      retries: 5
    #      test:
    #        [
    #          "CMD",
    #          "/bin/sh",
    #          "-c",
    #          "curl -f http://localhost:8082/actuator/health || exit 1"
    #        ]
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-account:3306/banksphere_account
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=account-service
      # make Tomcat bind on 0.0.0.0
      - SERVER_ADDRESS=0.0.0.0
    networks:
      - internal

  transaction-service:
    container_name: transaction-service
    build:
      context: ./transaction
      dockerfile: Dockerfile
    #    image: transaction-service:latest
    expose:
      - '8083'
    volumes:
      - ./logs/transaction:/logs/transaction
    depends_on:
      mysql-transaction:
        condition: service_healthy
      kafka:
        condition: service_healthy
    #    healthcheck:
    #      #      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
    #      interval: 10s
    #      timeout: 5s
    #      retries: 5
    #      test:
    #        [
    #          "CMD",
    #          "/bin/sh",
    #          "-c",
    #          "curl -f http://localhost:8083/actuator/health || exit 1"
    #        ]
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-transaction:3306/banksphere_transaction
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS=kafka:9092
      - SERVER_ADDRESS=0.0.0.0
    networks:
      - internal

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.13.2
    user: root
    volumes:
      - ./logs:/logs
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    entrypoint:
      - filebeat
      - -e
      - -c
      - /usr/share/filebeat/filebeat.yml
      - -strict.perms=false
    environment:
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
    depends_on:
      - elasticsearch
    networks:
      - internal

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # for local dev
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - internal
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.2
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - internal
networks:
  internal:
    driver: bridge
